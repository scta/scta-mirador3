"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkspaceMosaic = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactMosaicComponent = require("react-mosaic-component");

var _mosaicUpdates = require("react-mosaic-component/lib/util/mosaicUpdates");

require("react-mosaic-component/react-mosaic-component.css");

var _difference = _interopRequireDefault(require("lodash/difference"));

var _MosaicRenderPreview = _interopRequireDefault(require("../containers/MosaicRenderPreview"));

var _Window = _interopRequireDefault(require("../containers/Window"));

/**
 * Represents a work area that contains any number of windows
 * @memberof Workspace
 * @private
 */
var WorkspaceMosaic =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(WorkspaceMosaic, _React$Component);

  /**
   */
  function WorkspaceMosaic(props) {
    var _this;

    (0, _classCallCheck2.default)(this, WorkspaceMosaic);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(WorkspaceMosaic).call(this, props));
    _this.tileRenderer = _this.tileRenderer.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    _this.mosaicChange = _this.mosaicChange.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    _this.determineWorkspaceLayout = _this.determineWorkspaceLayout.bind((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)));
    _this.zeroStateView = _react.default.createElement("div", null);
    _this.windowPaths = {};
    return _this;
  }
  /** */


  (0, _createClass2.default)(WorkspaceMosaic, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var updateWorkspaceMosaicLayout = this.props.updateWorkspaceMosaicLayout;
      var newLayout = this.determineWorkspaceLayout();
      if (newLayout) updateWorkspaceMosaicLayout(newLayout);
    }
    /** */

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      var _this$props = this.props,
          windows = _this$props.windows,
          workspace = _this$props.workspace,
          updateWorkspaceMosaicLayout = _this$props.updateWorkspaceMosaicLayout;
      var prevWindows = Object.keys(prevProps.windows);
      var currentWindows = Object.keys(windows); // Handles when Windows are removed from the state

      if (!prevWindows.every(function (e) {
        return currentWindows.includes(e);
      })) {
        // There are no more remaining Windows, just return an empty layout
        if (currentWindows.length === 0) {
          updateWorkspaceMosaicLayout({});
          return;
        } // Generate a set of "removeUpdates" to update layout binary tree


        var removedWindows = (0, _difference.default)(prevWindows, currentWindows);
        var removeUpdates = removedWindows.map(function (windowId) {
          return (0, _mosaicUpdates.createRemoveUpdate)(workspace.layout, _this2.windowPaths[windowId]);
        });
        var newTree = (0, _mosaicUpdates.updateTree)(workspace.layout, removeUpdates);
        updateWorkspaceMosaicLayout(newTree);
      } // Handles when Windows are added (not via Add Resource UI)
      // TODO: If a window is added, add it in a better way #2380


      if (!currentWindows.every(function (e) {
        return prevWindows.includes(e);
      })) {
        var newLayout = this.determineWorkspaceLayout();
        if (newLayout !== workspace.layout) updateWorkspaceMosaicLayout(newLayout);
      }
    }
    /**
     * bookkeepPath - used to book keep Window's path's
     * @param  {String} windowId   [description]
     * @param  {Array} path [description]
     */

  }, {
    key: "bookkeepPath",
    value: function bookkeepPath(windowId, path) {
      this.windowPaths[windowId] = path;
    }
    /**
     * Used to determine whether or not a "new" layout should be autogenerated.
     * TODO: If a window is added, add it in a better way #2380
     */

  }, {
    key: "determineWorkspaceLayout",
    value: function determineWorkspaceLayout() {
      var _this$props2 = this.props,
          windows = _this$props2.windows,
          workspace = _this$props2.workspace;
      var windowKeys = Object.keys(windows).sort();
      var leaveKeys = (0, _reactMosaicComponent.getLeaves)(workspace.layout); // Windows were added

      if (!windowKeys.every(function (e) {
        return leaveKeys.includes(e);
      })) {
        // No current layout, so just generate a new one
        if (leaveKeys.length === 0) {
          return (0, _reactMosaicComponent.createBalancedTreeFromLeaves)(windowKeys);
        } // TODO: Here is where we will determine where to add a new Window #2380


        return (0, _reactMosaicComponent.createBalancedTreeFromLeaves)(windowKeys);
      }

      return workspace.layout;
    }
    /**
     * Render a tile (Window) in the Mosaic.
     */

  }, {
    key: "tileRenderer",
    value: function tileRenderer(id, path) {
      var _this$props3 = this.props,
          windows = _this$props3.windows,
          workspace = _this$props3.workspace;
      var window = windows[id];
      if (!window) return null;
      this.bookkeepPath(window.id, path);
      return _react.default.createElement(_reactMosaicComponent.MosaicWindow, {
        toolbarControls: [],
        additionalControls: [],
        path: path,
        windowId: window.id,
        renderPreview: function renderPreview() {
          return _react.default.createElement("div", {
            className: "mosaic-preview"
          }, _react.default.createElement(_MosaicRenderPreview.default, {
            windowId: window.id
          }));
        }
      }, _react.default.createElement(_Window.default, {
        key: "".concat(window.id, "-").concat(workspace.id),
        window: window
      }));
    }
    /**
     * Update the redux store when the Mosaic is changed.
     */

  }, {
    key: "mosaicChange",
    value: function mosaicChange(newLayout) {
      var updateWorkspaceMosaicLayout = this.props.updateWorkspaceMosaicLayout;
      updateWorkspaceMosaicLayout(newLayout);
    }
    /**
     */

  }, {
    key: "render",
    value: function render() {
      var workspace = this.props.workspace;
      return _react.default.createElement(_reactMosaicComponent.Mosaic, {
        renderTile: this.tileRenderer,
        initialValue: workspace.layout || this.determineWorkspaceLayout(),
        onChange: this.mosaicChange,
        className: "mirador-mosaic",
        zeroStateView: this.zeroStateView
      });
    }
  }]);
  return WorkspaceMosaic;
}(_react.default.Component);

exports.WorkspaceMosaic = WorkspaceMosaic;
WorkspaceMosaic.propTypes = {
  updateWorkspaceMosaicLayout: _propTypes.default.func.isRequired,
  windows: _propTypes.default.object.isRequired,
  // eslint-disable-line react/forbid-prop-types
  workspace: _propTypes.default.object.isRequired // eslint-disable-line react/forbid-prop-types

};